apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: srlinux-controller
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: srlinux-controller
    control-plane: controller-manager
  name: srlinux-controller
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: srlinuxes.kne.srlinux.dev
spec:
  group: kne.srlinux.dev
  names:
    kind: Srlinux
    listKind: SrlinuxList
    plural: srlinuxes
    singular: srlinux
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.image
      name: Image
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1
    schema:
      openAPIV3Schema:
        description: Srlinux is the Schema for the srlinuxes API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          license_key:
            description: license key from license secret that contains a license file
              for this Srlinux
            type: string
          metadata:
            type: object
          spec:
            description: SrlinuxSpec defines the desired state of Srlinux.
            properties:
              config:
                description: NodeConfig represents srlinux node configuration parameters.
                properties:
                  args:
                    items:
                      type: string
                    type: array
                  cert:
                    description: CertificateCfg represents srlinux certificate configuration
                      parameters.
                    properties:
                      cert_name:
                        description: Certificate name on the node.
                        type: string
                      common_name:
                        description: Common name to set in the cert.
                        type: string
                      key_name:
                        description: Key name on the node.
                        type: string
                      key_size:
                        description: RSA keysize to use for key generation.
                        format: int32
                        type: integer
                    type: object
                  command:
                    items:
                      type: string
                    type: array
                  config_data_present:
                    description: When set to true by kne, srlinux controller will
                      attempt to mount the file with startup config to the pod
                    type: boolean
                  config_file:
                    description: Startup configuration file name for the pod. Set
                      in the kne topo and created by kne as a config map
                    type: string
                  config_path:
                    description: Mount point for configuration inside the pod. Should
                      point to a dir that contains ConfigFile
                    type: string
                  entry_command:
                    description: Specific entry point command for accessing the pod.
                    type: string
                  env:
                    additionalProperties:
                      type: string
                    description: Map of environment variables to pass into the pod.
                    type: object
                  image:
                    type: string
                  sleep:
                    format: int32
                    type: integer
                type: object
              constraints:
                additionalProperties:
                  type: string
                type: object
              model:
                description: Model encodes SR Linux variant (ixr-d3, ixr-6e, etc)
                type: string
              num-interfaces:
                type: integer
              version:
                description: Version may be set in kne topology as a mean to explicitly
                  provide version information in case it is not encoded in the image
                  tag
                type: string
            type: object
          status:
            description: SrlinuxStatus defines the observed state of Srlinux.
            properties:
              image:
                description: Image used to run srlinux pod
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: srlinux-controller
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: srlinux-controller
  name: srlinux-controller-controller-manager
  namespace: srlinux-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: srlinux-controller
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: srlinux-controller
  name: srlinux-controller-leader-election-role
  namespace: srlinux-controller
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: srlinux-controller-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - kne.srlinux.dev
  resources:
  - srlinuxes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - kne.srlinux.dev
  resources:
  - srlinuxes/finalizers
  verbs:
  - update
- apiGroups:
  - kne.srlinux.dev
  resources:
  - srlinuxes/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: srlinux-controller
    app.kubernetes.io/instance: metrics-reader
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: srlinux-controller
  name: srlinux-controller-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: srlinux-controller
    app.kubernetes.io/instance: proxy-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: srlinux-controller
  name: srlinux-controller-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: srlinux-controller
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: srlinux-controller
  name: srlinux-controller-leader-election-rolebinding
  namespace: srlinux-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: srlinux-controller-leader-election-role
subjects:
- kind: ServiceAccount
  name: srlinux-controller-controller-manager
  namespace: srlinux-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: srlinux-controller
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: srlinux-controller
  name: srlinux-controller-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: srlinux-controller-manager-role
subjects:
- kind: ServiceAccount
  name: srlinux-controller-controller-manager
  namespace: srlinux-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: srlinux-controller
    app.kubernetes.io/instance: proxy-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: srlinux-controller
  name: srlinux-controller-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: srlinux-controller-proxy-role
subjects:
- kind: ServiceAccount
  name: srlinux-controller-controller-manager
  namespace: srlinux-controller
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: srlinux-controller
    app.kubernetes.io/instance: controller-manager-metrics-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: srlinux-controller
    control-plane: controller-manager
  name: srlinux-controller-controller-manager-metrics-service
  namespace: srlinux-controller
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: srlinux-controller
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: srlinux-controller
    control-plane: controller-manager
  name: srlinux-controller-controller-manager
  namespace: srlinux-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
                - ppc64le
                - s390x
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        image: ghcr.io/srl-labs/srl-controller:0.5.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: true
      serviceAccountName: srlinux-controller-controller-manager
      terminationGracePeriodSeconds: 10