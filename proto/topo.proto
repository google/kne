// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package topo;

option go_package = "github.com/google/kne/proto/topo";


// Build with protoc -I=proto --go_out=proto/topo proto/topo.proto


// Topology message defines what nodes and links will be created
// inside the mesh.
message Topology {
  string name = 1; // Name of the topology - will be linked to the cluster name
  repeated Node nodes = 2; // List of nodes in the topology
  repeated Link links = 3; // connections between Nodes.
}


// Node is a single container inside the topology
message Node {
  enum Type {
    UNKNOWN = 0;
    HOST = 1;
    ARISTA_CEOS = 2;
    JUNIPER_CEVO = 3;
    CISCO_CXR = 4;
    QUAGGA = 5;
    FRR = 6;
    JUNIPER_VMX = 7;
    CISCO_CSR = 8;
    NOKIA_SRL = 9;
    IXIA_TG = 10;
  }

  string name = 1; // Name of the node in the topology. Must be unique.
  Type type = 2; // Type of node to create.
  map<string,string> labels = 4; // Metadata labels describing the node.
  Config config = 5; // Pod specfic configuration of the node.
  map<uint32, Service> services = 6; // Map of services to enable on the node.
  map<string, string> constraints = 7; // Any k8s constraints required by node.
}

// Link is single link between nodes in the topology.
// Interfaces must start eth1 - eth0 is the default k8s interface.
message Link {
  string a_node = 1;
  string a_int = 2;
  string z_node = 3;
  string z_int = 4; 
}

// Config is the k8s pod specific configuration for a node.
message Config {
  repeated string command = 1;  // Command to pass into pod.
  repeated string args = 2;     // Command args to pass into the pod.
  string image = 3;             // Docker image to use with pod.
  // Map of environment variables to pass into the pod.
  map<string, string> env = 4; 
  // Specific entry point command for accessing the pod. 
  string entry_command = 5;
  // Mount point for configuration inside the pod.
  string config_path = 6;
  // Default configuration file name for the pod.       
  string config_file = 7;       
  uint32 sleep = 8;             // Sleeptime before starting the pod.
  oneof config_data {
    // Byte data for the startup configuration file.
    bytes data = 101;
    // Local file to read for the configuration file.          
    string file = 102;
  }
}

// Service is k8s Service to exposed to the cluster. The initial input can be
// provided by the user for which services they would like exposed. Once the
// service is created KNE will fill in the outside information for the user to
// access the services.
message Service {
  string name = 1;  // Name of the service (optional)
  uint32 inside = 2; // Inside port to map
  uint32 outside = 3; // Outside port to map (0 = autoassign from cluster)
  string inside_ip = 4;  // Assigned by KNE.
  string outside_ip = 5; // Assigned by KNE.
}
