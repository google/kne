// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: wire.proto

package wire

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WireClient is the client API for Wire service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WireClient interface {
	// Transmit sets up a bidirectional Packet stream.
	// Metadata can be configured to identify the destination.
	Transmit(ctx context.Context, opts ...grpc.CallOption) (Wire_TransmitClient, error)
}

type wireClient struct {
	cc grpc.ClientConnInterface
}

func NewWireClient(cc grpc.ClientConnInterface) WireClient {
	return &wireClient{cc}
}

func (c *wireClient) Transmit(ctx context.Context, opts ...grpc.CallOption) (Wire_TransmitClient, error) {
	stream, err := c.cc.NewStream(ctx, &Wire_ServiceDesc.Streams[0], "/wire.Wire/Transmit", opts...)
	if err != nil {
		return nil, err
	}
	x := &wireTransmitClient{stream}
	return x, nil
}

type Wire_TransmitClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type wireTransmitClient struct {
	grpc.ClientStream
}

func (x *wireTransmitClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wireTransmitClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WireServer is the server API for Wire service.
// All implementations must embed UnimplementedWireServer
// for forward compatibility
type WireServer interface {
	// Transmit sets up a bidirectional Packet stream.
	// Metadata can be configured to identify the destination.
	Transmit(Wire_TransmitServer) error
	mustEmbedUnimplementedWireServer()
}

// UnimplementedWireServer must be embedded to have forward compatible implementations.
type UnimplementedWireServer struct {
}

func (UnimplementedWireServer) Transmit(Wire_TransmitServer) error {
	return status.Errorf(codes.Unimplemented, "method Transmit not implemented")
}
func (UnimplementedWireServer) mustEmbedUnimplementedWireServer() {}

// UnsafeWireServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WireServer will
// result in compilation errors.
type UnsafeWireServer interface {
	mustEmbedUnimplementedWireServer()
}

func RegisterWireServer(s grpc.ServiceRegistrar, srv WireServer) {
	s.RegisterService(&Wire_ServiceDesc, srv)
}

func _Wire_Transmit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WireServer).Transmit(&wireTransmitServer{stream})
}

type Wire_TransmitServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type wireTransmitServer struct {
	grpc.ServerStream
}

func (x *wireTransmitServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wireTransmitServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Wire_ServiceDesc is the grpc.ServiceDesc for Wire service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wire_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wire.Wire",
	HandlerType: (*WireServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transmit",
			Handler:       _Wire_Transmit_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wire.proto",
}
